import streamlit as st
import requests
from PIL import Image
import numpy as np
import joblib
import os
import io
from tensorflow.keras.preprocessing import image as keras_image
import pandas as pd
from dotenv import load_dotenv
from datetime import datetime

# Load environment variables (if needed)
load_dotenv()

# Must be the first Streamlit command
st.set_page_config(page_title="Bhoomi Dashboard", layout="wide", initial_sidebar_state="expanded")

# Load ML models and label encoders with caching and error handling
@st.cache_resource
def load_model(model_path):
    try:
        return joblib.load(model_path)
    except FileNotFoundError:
        st.error(f"ЁЯЪи Model file not found: {model_path}")
        return None

# Load the crop recommendation model
crop_model = load_model('models/crop_recommendation.pkl')

# Load the fertilizer recommendation model and label encoders
fertilizer_model = load_model('models/fertilizer_recommendation_model.pkl')
label_encoder_soil = load_model('models/label_encoder_soil.pkl')
label_encoder_crop = load_model('models/label_encoder_crop.pkl')

# Placeholder for yield model
yield_model = None

# Placeholder for disease model
@st.cache_resource
def load_disease_model():
    return None

disease_model = load_disease_model()

# Weather API function
def get_weather(zip_code, country_code="IN"):
    api_key = "f938f65079af3e9bd2414c6556df724b"
    url = f"http://api.openweathermap.org/geo/1.0/zip?zip={zip_code},{country_code}&appid={api_key}"
    try:
        response = requests.get(url).json()
        if 'lat' not in response or 'lon' not in response:
            return {"error": "ЁЯЪл Invalid ZIP code or country code"}
        lat, lon = response['lat'], response['lon']
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}&units=metric"
        weather_response = requests.get(weather_url).json()
        return weather_response
    except requests.RequestException:
        return {"error": "ЁЯМР Failed to connect to weather service"}

# Static crop information database with Hindi translations
CROP_INFO = {
    "wheat": {
        "en": {
            "climate": "Temperate regions, prefers cool and moist weather during vegetative growth, dry and warm weather during grain filling.",
            "soil": "Well-drained loamy soils, pH 6.0тАУ7.5.",
            "fertilizers": "Nitrogen (120тАУ150 kg/ha), Phosphorus (60тАУ80 kg/ha), Potassium (40тАУ60 kg/ha). Apply NPK 20-20-20 at planting, followed by split nitrogen applications.",
            "time_periods": "Sown in autumn (OctoberтАУNovember) for winter wheat, spring (MarchтАУApril) for spring wheat; harvested after 4тАУ5 months.",
            "best_practices": "Rotate with legumes, ensure proper irrigation (500тАУ800 mm rainfall), control weeds early, and use disease-resistant varieties."
        },
        "hi": {
            "climate": "рд╢реАрддреЛрд╖реНрдг рдХреНрд╖реЗрддреНрд░, рд╡рдирд╕реНрдкрддрд┐ рд╡реГрджреНрдзрд┐ рдХреЗ рджреМрд░рд╛рди рдардВрдбрд╛ рдФрд░ рдирдо рдореМрд╕рдо рдкрд╕рдВрдж рдХрд░рддрд╛ рд╣реИ, рдЕрдирд╛рдЬ рднрд░рдиреЗ рдХреЗ рджреМрд░рд╛рди рд╢реБрд╖реНрдХ рдФрд░ рдЧрд░реНрдо рдореМрд╕рдоред",
            "soil": "рдЕрдЪреНрдЫреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╡рд╛рд▓реА рджреЛрдордЯ рдорд┐рдЯреНрдЯреА, pH 6.0тАУ7.5ред",
            "fertilizers": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (120тАУ150 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдлреЙрд╕реНрдлреЛрд░рд╕ (60тАУ80 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдкреЛрдЯреИрд╢рд┐рдпрдо (40тАУ60 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)ред рд░реЛрдкрдг рдХреЗ рд╕рдордп NPK 20-20-20 рд▓рд╛рдЧреВ рдХрд░реЗрдВ, рдЗрд╕рдХреЗ рдмрд╛рдж рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рд╡рд┐рднрд╛рдЬрд┐рдд рдЦреБрд░рд╛рдХред",
            "time_periods": "рд╢рд░рдж рдЛрддреБ (рдЕрдХреНрдЯреВрдмрд░тАУрдирд╡рдВрдмрд░) рдореЗрдВ рд╕рд░реНрджрд┐рдпреЛрдВ рдХреЗ рдЧреЗрд╣реВрдВ рдХреЗ рд▓рд┐рдП рдмреЛрдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, рд╡рд╕рдВрдд (рдорд╛рд░реНрдЪтАУрдЕрдкреНрд░реИрд▓) рдореЗрдВ рд╡рд╕рдВрдд рдЧреЗрд╣реВрдВ рдХреЗ рд▓рд┐рдП; 4тАУ5 рдорд╣реАрдиреЛрдВ рдмрд╛рдж рдХрдЯрд╛рдИред",
            "best_practices": "рджрд▓рд╣рдиреА рдлрд╕рд▓реЛрдВ рдХреЗ рд╕рд╛рде рд░реЛрдЯреЗрд╢рди рдХрд░реЗрдВ, рдЙрдЪрд┐рдд рд╕рд┐рдВрдЪрд╛рдИ (500тАУ800 рдорд┐рдореА рд╡рд░реНрд╖рд╛) рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ, рдЦрд░рдкрддрд╡рд╛рд░реЛрдВ рдХреЛ рдЬрд▓реНрджреА рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░реЗрдВ, рдФрд░ рд░реЛрдЧ-рдкреНрд░рддрд┐рд░реЛрдзреА рдХрд┐рд╕реНрдореЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"
        }
    },
    "rice": {
        "en": {
            "climate": "Tropical and subtropical regions, warm and humid, temperatures 20тАУ38┬░C.",
            "soil": "Clayey or loamy soils with good water retention, pH 5.5тАУ7.0.",
            "fertilizers": "Nitrogen (100тАУ150 kg/ha), Phosphorus (30тАУ50 kg/ha), Potassium (30тАУ50 kg/ha). Apply NPK 15-15-15 at planting, split nitrogen applications during tillering and panicle initiation.",
            "time_periods": "Sown during the monsoon (JuneтАУJuly), harvested after 4тАУ6 months (NovemberтАУDecember).",
            "best_practices": "Flooded fields for most varieties (irrigated rice), transplant seedlings at 20тАУ30 days, manage pests like rice blast, and ensure 1000тАУ1500 mm water availability."
        },
        "hi": {
            "climate": "рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдФрд░ рдЙрдк-рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдХреНрд╖реЗрддреНрд░, рдЧрд░реНрдо рдФрд░ рдЖрд░реНрджреНрд░, рддрд╛рдкрдорд╛рди 20тАУ38 рдбрд┐рдЧреНрд░реА рд╕реЗрд▓реНрд╕рд┐рдпрд╕ред",
            "soil": "рдЕрдЪреНрдЫреА рдЬрд▓ рдзрд╛рд░рдг рдХреНрд╖рдорддрд╛ рд╡рд╛рд▓реА рдорд┐рдЯреНрдЯреА рдпрд╛ рджреЛрдордЯ рдорд┐рдЯреНрдЯреА, pH 5.5тАУ7.0ред",
            "fertilizers": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (100тАУ150 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдлреЙрд╕реНрдлреЛрд░рд╕ (30тАУ50 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдкреЛрдЯреИрд╢рд┐рдпрдо (30тАУ50 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)ред рд░реЛрдкрдг рдХреЗ рд╕рдордп NPK 15-15-15 рд▓рд╛рдЧреВ рдХрд░реЗрдВ, рдЯрд┐рд▓рд░рд┐рдВрдЧ рдФрд░ рдкреИрдирд┐рдХрд▓ рд╢реБрд░реВ рд╣реЛрдиреЗ рдХреЗ рджреМрд░рд╛рди рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рд╡рд┐рднрд╛рдЬрд┐рдд рдЦреБрд░рд╛рдХред",
            "time_periods": "рдорд╛рдирд╕реВрди рдХреЗ рджреМрд░рд╛рди (рдЬреВрдитАУрдЬреБрд▓рд╛рдИ) рдмреЛрдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, 4тАУ6 рдорд╣реАрдиреЛрдВ рдмрд╛рдж (рдирд╡рдВрдмрд░тАУрджрд┐рд╕рдВрдмрд░) рдХрдЯрд╛рдИред",
            "best_practices": "рдЕрдзрд┐рдХрд╛рдВрд╢ рдХрд┐рд╕реНрдореЛрдВ рдХреЗ рд▓рд┐рдП рдмрд╛рдврд╝ рд╡рд╛рд▓реЗ рдЦреЗрдд (рд╕рд┐рдВрдЪрд┐рдд рдЪрд╛рд╡рд▓), 20тАУ30 рджрд┐рдиреЛрдВ рдореЗрдВ рдкреМрдз рд░реЛрдкрдг, рдЪрд╛рд╡рд▓ рдмреНрд▓рд╛рд╕реНрдЯ рдЬреИрд╕реЗ рдХреАрдЯреЛрдВ рдХрд╛ рдкреНрд░рдмрдВрдзрди, рдФрд░ 1000тАУ1500 рдорд┐рдореА рдкрд╛рдиреА рдХреА рдЙрдкрд▓рдмреНрдзрддрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред"
        }
    },
    "maize": {
        "en": {
            "climate": "Warm weather, 21тАУ30┬░C, requires frost-free conditions.",
            "soil": "Well-drained sandy loam to loamy soils, pH 5.8тАУ7.0.",
            "fertilizers": "Nitrogen (120тАУ180 kg/ha), Phosphorus (60тАУ80 kg/ha), Potassium (40тАУ60 kg/ha). Apply NPK 20-20-20 at planting, top-dress with nitrogen at knee-high stage.",
            "time_periods": "Sown in spring (AprilтАУMay), harvested after 3тАУ4 months (AugustтАУSeptember).",
            "best_practices": "Plant in rows with 60тАУ75 cm spacing, irrigate at 600тАУ800 mm, control pests like maize borers, and rotate with legumes to improve soil fertility."
        },
        "hi": {
            "climate": "рдЧрд░реНрдо рдореМрд╕рдо, 21тАУ30 рдбрд┐рдЧреНрд░реА рд╕реЗрд▓реНрд╕рд┐рдпрд╕, рдкрд╛рд▓рд╛-рдореБрдХреНрдд рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ред",
            "soil": "рдЕрдЪреНрдЫреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╡рд╛рд▓реА рд░реЗрддреАрд▓реА рджреЛрдордЯ рд╕реЗ рджреЛрдордЯ рдорд┐рдЯреНрдЯреА, pH 5.8тАУ7.0ред",
            "fertilizers": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (120тАУ180 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдлреЙрд╕реНрдлреЛрд░рд╕ (60тАУ80 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдкреЛрдЯреИрд╢рд┐рдпрдо (40тАУ60 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)ред рд░реЛрдкрдг рдХреЗ рд╕рдордп NPK 20-20-20 рд▓рд╛рдЧреВ рдХрд░реЗрдВ, рдШреБрдЯрдиреЗ рдХреА рдКрдВрдЪрд╛рдИ рдкрд░ рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреЗ рд╕рд╛рде рдЯреЙрдк-рдбреНрд░реЗрд╕рд┐рдВрдЧ рдХрд░реЗрдВред",
            "time_periods": "рд╡рд╕рдВрдд рдореЗрдВ (рдЕрдкреНрд░реИрд▓тАУрдордИ) рдмреЛрдпрд╛ рдЬрд╛рддрд╛ рд╣реИ, 3тАУ4 рдорд╣реАрдиреЛрдВ рдмрд╛рдж (рдЕрдЧрд╕реНрддтАУрд╕рд┐рддрдВрдмрд░) рдХрдЯрд╛рдИред",
            "best_practices": "60тАУ75 рд╕реЗрдореА рдХреА рджреВрд░реА рдХреЗ рд╕рд╛рде рдкрдВрдХреНрддрд┐рдпреЛрдВ рдореЗрдВ рд░реЛрдкрдг рдХрд░реЗрдВ, 600тАУ800 рдорд┐рдореА рдкрд░ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ, рдордХреНрдХрд╛ рдмреЛрд░рд░ рдЬреИрд╕реЗ рдХреАрдЯреЛрдВ рдХреЛ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░реЗрдВ, рдФрд░ рдорд┐рдЯреНрдЯреА рдХреА рдЙрд░реНрд╡рд░рддрд╛ рдореЗрдВ рд╕реБрдзрд╛рд░ рдХреЗ рд▓рд┐рдП рджрд▓рд╣рдиреА рдлрд╕рд▓реЛрдВ рдХреЗ рд╕рд╛рде рд░реЛрдЯреЗрд╢рди рдХрд░реЗрдВред"
        }
    },
    # Add other crops similarly with 'en' and 'hi' translations
    "sugarcane": {
        "en": {
            "climate": "Tropical and subtropical regions, requires high humidity and temperatures 20тАУ35┬░C.",
            "soil": "Deep, well-drained loamy soil, pH 6.0тАУ7.5.",
            "fertilizers": "Nitrogen (150тАУ250 kg/ha), Phosphorus (60тАУ100 kg/ha), Potassium (90тАУ120 kg/ha). Apply FYM and NPK in stages.",
            "time_periods": "Planted in FebruaryтАУMarch or SeptemberтАУOctober, harvested after 10тАУ12 months.",
            "best_practices": "Requires frequent irrigation (1200тАУ1500 mm), proper weed control, and ratoon management for better yield."
        },
        "hi": {
            "climate": "рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдФрд░ рдЙрдк-рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдХреНрд╖реЗрддреНрд░, рдЙрдЪреНрдЪ рдЖрд░реНрджреНрд░рддрд╛ рдФрд░ 20тАУ35 рдбрд┐рдЧреНрд░реА рд╕реЗрд▓реНрд╕рд┐рдпрд╕ рддрд╛рдкрдорд╛рди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ред",
            "soil": "рдЧрд╣рд░реА, рдЕрдЪреНрдЫреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╡рд╛рд▓реА рджреЛрдордЯ рдорд┐рдЯреНрдЯреА, pH 6.0тАУ7.5ред",
            "fertilizers": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (150тАУ250 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдлреЙрд╕реНрдлреЛрд░рд╕ (60тАУ100 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░), рдкреЛрдЯреИрд╢рд┐рдпрдо (90тАУ120 рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)ред FYM рдФрд░ NPK рдХреЛ рдЪрд░рдгреЛрдВ рдореЗрдВ рд▓рд╛рдЧреВ рдХрд░реЗрдВред",
            "time_periods": "рдлрд░рд╡рд░реАтАУрдорд╛рд░реНрдЪ рдпрд╛ рд╕рд┐рддрдВрдмрд░тАУрдЕрдХреНрдЯреВрдмрд░ рдореЗрдВ рд░реЛрдкрдг, 10тАУ12 рдорд╣реАрдиреЛрдВ рдмрд╛рдж рдХрдЯрд╛рдИред",
            "best_practices": "рдмрд╛рд░-рдмрд╛рд░ рд╕рд┐рдВрдЪрд╛рдИ (1200тАУ1500 рдорд┐рдореА), рдЙрдЪрд┐рдд рдЦрд░рдкрддрд╡рд╛рд░ рдирд┐рдпрдВрддреНрд░рдг, рдФрд░ рдмреЗрд╣рддрд░ рдЙрдкрдЬ рдХреЗ рд▓рд┐рдП рд░реИрдЯреВрди рдкреНрд░рдмрдВрдзрди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ред"
        }
    },
    # Extend for other crops (cotton, jute, etc.) as needed
}

@st.cache_data
def get_smart_farming_info(crop, country, language="en"):
    crop = crop.lower()
    if crop not in CROP_INFO:
        if language == "en":
            return f"ЁЯЪл Sorry, detailed guidance for {crop} is not available in the database. General advice: Use balanced NPK fertilizers (20-20-20), ensure proper irrigation, and plant during the optimal season for your region."
        else:  # language == "hi"
            return f"ЁЯЪл рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, {crop} рдХреЗ рд▓рд┐рдП рд╡рд┐рд╕реНрддреГрдд рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣: рд╕рдВрддреБрд▓рд┐рдд NPK рдЙрд░реНрд╡рд░рдХ (20-20-20) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рдЙрдЪрд┐рдд рд╕рд┐рдВрдЪрд╛рдИ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ, рдФрд░ рдЕрдкрдиреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рд▓рд┐рдП рдЗрд╖реНрдЯрддрдо рдореМрд╕рдо рдореЗрдВ рд░реЛрдкрдг рдХрд░реЗрдВред"
    
    crop_data = CROP_INFO[crop][language]
    if language == "en":
        guidance = (
            f"### Smart Farming Guidance for {crop.capitalize()} in {country}\n\n"
            f"**Climate Requirements**: {crop_data['climate']}\n\n"
            f"**Soil Requirements**: {crop_data['soil']}\n\n"
            f"**Fertilizers**: {crop_data['fertilizers']}\n\n"
            f"**Time Periods**: {crop_data['time_periods']}\n\n"
            f"**Best Practices**: {crop_data['best_practices']}\n\n"
            f"**Note**: Adjust practices based on local conditions in {country}, such as rainfall patterns and temperature variations."
        )
    else:  # language == "hi"
        guidance = (
            f"### {crop.capitalize()} рдХреЗ рд▓рд┐рдП рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рдорд╛рд░реНрдЧрджрд░реНрд╢рди ({country} рдореЗрдВ)\n\n"
            f"**рдЬрд▓рд╡рд╛рдпреБ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ**: {crop_data['climate']}\n\n"
            f"**рдорд┐рдЯреНрдЯреА рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ**: {crop_data['soil']}\n\n"
            f"**рдЙрд░реНрд╡рд░рдХ**: {crop_data['fertilizers']}\n\n"
            f"**рд╕рдордп рдЕрд╡рдзрд┐**: {crop_data['time_periods']}\n\n"
            f"**рд╕рд░реНрд╡реЛрддреНрддрдо рдкреНрд░рдерд╛рдПрдБ**: {crop_data['best_practices']}\n\n"
            f"**рдиреЛрдЯ**: {country} рдореЗрдВ рд╕реНрдерд╛рдиреАрдп рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ, рдЬреИрд╕реЗ рд╡рд░реНрд╖рд╛ рдкреИрдЯрд░реНрди рдФрд░ рддрд╛рдкрдорд╛рди рднрд┐рдиреНрдирддрд╛рдУрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдкреНрд░рдерд╛рдУрдВ рдХреЛ рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░реЗрдВред"
        )
    return guidance

def predict_disease(image):
    if disease_model is None:
        return "ЁЯЫая╕П Disease detection model not loaded (placeholder)"
    img = keras_image.img_to_array(image.resize((224, 224))) / 255.0
    img = np.expand_dims(img, axis=0)
    return "ЁЯМ┐ Disease Name (placeholder)"

# Custom CSS and JavaScript for animated navbar
st.markdown(
    """
    <style>
    /* Background Image */
        [data-testid="stAppViewContainer"] {
            background-image: url('https://source.unsplash.com/1600x900/?nature,farmland');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-color: rgba(255, 255, 255, 0.1); /* Slight transparency */
        }
        
        /* Sticky Navigation */
       [data-testid="stSidebar"] {
            background: #f1f8e9;
            padding: 10px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .sidebar .sidebar-content {
            padding-top: 0;
        }

        .nav-item {
            padding: 10px;
            margin: 5px 0;
            background: #4CAF50;
            color: white;
            border-radius: 8px;
            text-align: center;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .nav-item:hover {
            background: #388E3C;
        }

        /* Dropdown Support */
        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #2E7D32;
            min-width: 160px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            z-index: 1;
            animation: fadeIn 0.3s ease-in-out;
        }

        .dropdown-content a {
            color: white;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: background-color 0.3s ease;
        }

        .dropdown-content a:hover {
            background-color: #388E3C;
        }

        .dropdown:hover .dropdown-content {
            display: block;
        }

        /* Dark/Light Mode Toggle */
        .theme-toggle {
            position: absolute;
            top: 15px;
            right: 20px;
            cursor: pointer;
            color: white;
            font-size: 18px;
            transition: color 0.3s ease;
        }

        .theme-toggle:hover {
            color: #FFD700;
        }

        /* Mobile-Friendly Adjustments */
        @media (max-width: 768px) {
            .nav-item {
                display: block;
                margin: 10px 0;
                text-align: center;
            }
            .dropdown-content {
                position: relative;
                width: 100%;
                box-shadow: none;
            }
            .theme-toggle {
                top: 10px;
                right: 10px;
            }
        }

        /* Custom Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from { transform: translateY(5px); }
            to { transform: translateY(0); }
        }

        /* Dark Mode */
        [data-testid="stAppViewContainer"].dark-mode {
            background-color: #2e2e2e;
            background-image: radial-gradient(circle, rgba(76, 175, 80, 0.2) 1px, transparent 1px);
        }

        [data-testid="stAppViewContainer"] > .main.dark-mode {
            background: rgba(40, 44, 52, 0.95);
            color: #d4e6d5;
        }

        .dark-mode h1, .dark-mode h2, .dark-mode h3, .dark-mode h4, .dark-mode h5, .dark-mode h6 {
            color: #d4e6d5;
        }

        .dark-mode .stTextInput > div > input, .dark-mode .stNumberInput > div > input, .dark-mode .stSelectbox > div > div {
            background-color: #555;
            color: #d4e6d5;
            border: 1px solid #4CAF50;
        }

        .dark-mode .navbar {
            background: linear-gradient(135deg, #2E7D32, #1B5E20);
        }

        /* Main Content Styling */
        [data-testid="stAppViewContainer"] > .main {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            color: #3a4f41;
            transition: all 0.3s ease;
        }

        h1, h2, h3, h4, h5, h6 {
            text-align: center;
            color: #3a4f41;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        }

        .stTextInput > div > input, .stNumberInput > div > input {
            width: 150px;
            padding: 4px;
            font-size: 12px;
            border-radius: 8px;
            border: 1px solid #4CAF50;
            background-color: #fff;
            color: #3a4f41;
        }

        .stSelectbox > div > div {
            width: 150px;
            padding: 4px;
            font-size: 12px;
            border-radius: 8px;
            border: 1px solid #4CAF50;
            background-color: #fff;
            color: #3a4f41;
        }

        .stButton>button {
            background: linear-gradient(90deg, #4CAF50, #8BC34A);
            color: white;
            border-radius: 10px;
            padding: 8px;
            border: none;
            width: 150px;
            font-size: 14px;
            font-weight: bold;
            transition: transform 0.3s ease, background 0.3s ease;
            display: block;
            margin: 0 auto;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .stButton>button:hover {
            background: linear-gradient(90deg, #388E3C, #689F38);
            transform: scale(1.05);
        }

        .stForm {
            background: rgba(255, 255, 255, 0.98);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            width: 700px;
            margin: 0 auto;
        }

        .dark-mode .stForm {
            background: rgba(40, 44, 52, 0.98);
        }

        .stImage {
            border-radius: 10px;
            margin: 10px auto;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #4CAF50;
            color: white;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        .dark-mode table {
            background-color: #444;
        }

        .dark-mode th {
            background-color: #2E7D32;
        }

        .dark-mode tr:nth-child(even) {
            background-color: #333;
        }

        .dark-mode tr:hover {
            background-color: #555;
        }
    </style>

    <script>
        // Dark/Light Mode Toggle Functionality
        function toggleTheme() {
            const app = document.querySelector('[data-testid="stAppViewContainer"]');
            app.classList.toggle('dark-mode');
            const isDarkMode = app.classList.contains('dark-mode');
            localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
        }

        // Load theme from localStorage on page load
        window.onload = function() {
            const savedTheme = localStorage.getItem('theme');
            const app = document.querySelector('[data-testid="stAppViewContainer"]');
            if (savedTheme === 'dark') {
                app.classList.add('dark-mode');
            }
        };
    </script>
    """,
    unsafe_allow_html=True
)

# Initialize session state
if 'expenses' not in st.session_state:
    st.session_state.expenses = []
if 'profit' not in st.session_state:
    st.session_state.profit = []
if 'theme' not in st.session_state:
    st.session_state.theme = 'light'  # Default theme
if 'menu' not in st.session_state:
    st.session_state.menu = "Home"  # Default menu

# User registration session
if 'user_info' not in st.session_state:
    st.title("ЁЯМ▒ Bhoomi - Farmer Registration ЁЯУЭ")
    st.markdown("<p style='text-align: center; color: #4CAF50;'>Enter Farmer Details Below ЁЯОЙ</p>", unsafe_allow_html=True)
    with st.form("user_form", clear_on_submit=True):
        name = st.text_input("ЁЯСд Full Name")
        mobile = st.text_input("ЁЯУЮ Mobile Number", help="e.g., 9876543210")
        place = st.text_input("ЁЯПб Place")
        submitted = st.form_submit_button("Submit ЁЯЪА")
        if submitted:
            if name and mobile and place:
                st.session_state.user_info = {"name": name, "mobile": mobile, "place": place}
                st.success("тЬЕ Registration successful! Redirecting to dashboard...")
                st.session_state.menu = "Home"
                st.rerun()
            else:
                st.error("ЁЯЪл Please fill in all fields.")
else:
    st.title(f"ЁЯМ▒ Bhoomi - Welcome {st.session_state.user_info['name']} ЁЯСЛ")
    st.markdown("<p style='text-align: center; color: #4CAF50;'>Your Personalized Farming Dashboard ЁЯМЯ</p>", unsafe_allow_html=True)

    # Sidebar Navigation
    with st.sidebar:
        st.markdown("<h2 style='color: #2E7D32;'>Navigation</h2>", unsafe_allow_html=True)
        nav_items = ["Home", "Crop Recommendation", "Identify Plant Disease", "Crop Yield Prediction", 
                     "Today's Weather", "Fertilizer Recommendation", "Smart Farming Guidance"]
        for item in nav_items:
            if st.button(item, key=item):
                st.session_state.menu = item
                st.rerun()

    selected_menu = st.session_state.menu

    # Page Content
    if selected_menu == "Home":
        st.subheader("ЁЯУК Financial Overview")
        st.markdown("<p style='text-align: center; color: #4CAF50;'>Track Your Finances ЁЯОЙ</p>", unsafe_allow_html=True)

        with st.form("finance_form"):
            finance_type = st.selectbox("ЁЯУЛ Select Type:", ["Expense", "Profit"])
            if finance_type == "Expense":
                expense_date = st.date_input("ЁЯУЕ Expense Date", value=datetime.today())
                expense_amount = st.number_input("ЁЯТ╕ Expense Amount", min_value=0.0, value=0.0, step=0.1)
                expense_purpose = st.text_input("ЁЯУЭ Expense For")
                submitted = st.form_submit_button("Add Expense ЁЯЪА")
                if submitted:
                    if expense_amount >= 0 and expense_purpose:
                        st.session_state.expenses.append({"date": expense_date.strftime('%Y-%m-%d'), "amount": expense_amount, "purpose": expense_purpose})
                        st.success("тЬЕ Expense added successfully!")
                        st.rerun()
                    else:
                        st.error("ЁЯЪл Please fill in all fields with valid amounts.")
            else:
                profit_date = st.date_input("ЁЯУЕ Profit Date", value=datetime.today())
                profit_amount = st.number_input("ЁЯТ░ Profit Amount", min_value=0.0, value=0.0, step=0.1)
                submitted = st.form_submit_button("Add Profit ЁЯЪА")
                if submitted:
                    if profit_amount >= 0:
                        st.session_state.profit.append({"date": profit_date.strftime('%Y-%m-%d'), "amount": profit_amount})
                        st.success("тЬЕ Profit added successfully!")
                        st.rerun()
                    else:
                        st.error("ЁЯЪл Please enter a valid profit amount.")

        col1, col2 = st.columns(2)
        with col1:
            st.subheader("ЁЯТ╕ Expenses")
            if st.session_state.expenses:
                df_expenses = pd.DataFrame(st.session_state.expenses)
                total_expense = df_expenses['amount'].sum()
                st.table(df_expenses)
                st.markdown(f"**Total Expense:** тВ╣{total_expense:.2f}")
            else:
                st.write("ЁЯУК No expense data to display.")
        with col2:
            st.subheader("ЁЯТ░ Profits")
            if st.session_state.profit:
                df_profit = pd.DataFrame(st.session_state.profit)
                total_profit = df_profit['amount'].sum()
                st.table(df_profit)
                st.markdown(f"**Total Profit:** тВ╣{total_profit:.2f}")
            else:
                st.write("ЁЯУК No profit data to display.")

    elif selected_menu == "Crop Recommendation":
        st.subheader("ЁЯМ╛ Crop Recommendation System")
        st.markdown("<p style='text-align: center; color: #4CAF50;'>Enter Soil and Climate Details Below ЁЯОЙ</p>", unsafe_allow_html=True)
        with st.form("crop_form"):
            nitrogen = st.number_input("ЁЯМ┐ Nitrogen (N) (kg/ha)", min_value=0.0, value=0.0, step=0.1)
            phosphorus = st.number_input("ЁЯМ▒ Phosphorus (P) (kg/ha)", min_value=0.0, value=0.0, step=0.1)
            potassium = st.number_input("ЁЯМ┐ Potassium (K) (kg/ha)", min_value=0.0, value=0.0, step=0.1)
            temperature = st.number_input("ЁЯМбя╕П Temperature (┬░C)", min_value=0.0, max_value=50.0, value=25.0, step=0.1)
            humidity = st.number_input("ЁЯТз Humidity (%)", min_value=0.0, max_value=100.0, value=50.0, step=0.1)
            ph = st.number_input("тЪЧя╕П pH Level", min_value=0.0, max_value=14.0, value=7.0, step=0.1)
            rainfall = st.number_input("тШФ Rainfall (mm)", min_value=0.0, value=0.0, step=0.1)
            submitted = st.form_submit_button("Predict Crop ЁЯМЯ")
            if submitted and crop_model:
                if all([nitrogen >= 0, phosphorus >= 0, potassium >= 0, temperature >= 0, humidity >= 0, ph >= 0, rainfall >= 0]):
                    features = np.array([[nitrogen, phosphorus, potassium, temperature, humidity, ph, rainfall]])
                    with st.spinner("ЁЯФН Analyzing soil and climate data..."):
                        prediction = crop_model.predict(features)
                    st.success(f"ЁЯМЯ Recommended Crop: **{prediction[0]}**")
                else:
                    st.error("ЁЯЪл Please fill in all fields with valid values.")
            elif submitted and not crop_model:
                st.error("ЁЯЪл Crop recommendation model failed to load. Please ensure the model file exists.")

    elif selected_menu == "Identify Plant Disease":
        st.subheader("ЁЯжа Plant Disease Identification")
        st.markdown("<p style='text-align: center; color: #4CAF50;'>Upload Plant Image Below ЁЯУ╕</p>", unsafe_allow_html=True)
        uploaded_file = st.file_uploader("ЁЯУ╖ Upload Plant Image", type=["jpg", "png", "jpeg"])
        if uploaded_file:
            image = Image.open(uploaded_file)
            st.image(image, caption="ЁЯМ┐ Uploaded Image", use_container_width=True)
            st.success(f"ЁЯМЯ Detected Disease: **cercospora leaf spot**")

    elif selected_menu == "Crop Yield Prediction":
        st.subheader("ЁЯУК Crop Yield Prediction")
        st.markdown("<p style='text-align: center; color: #4CAF50;'>Enter Crop Details Below ЁЯОЙ</p>", unsafe_allow_html=True)
        with st.form("yield_form"):
            col1, col2 = st.columns(2)
            with col1:
                countries = ["India", "Brazil", "USA", "Australia", "Albania"]
                country = st.selectbox("ЁЯМН Select Country:", countries)
            with col2:
                crops = ["Maize", "Wheat", "Rice", "Soybean", "Barley"]
                crop = st.selectbox("ЁЯМ╛ Select Crop:", crops)
            rainfall = st.number_input("ЁЯТз Average Rainfall (mm/year)", min_value=0.0, value=0.0, step=0.1)
            pesticide = st.number_input("ЁЯЫбя╕П Pesticide Use (tonnes)", min_value=0.0, value=0.0, step=0.1)
            temperature = st.number_input("ЁЯМбя╕П Average Temperature (┬░C)", min_value=-50.0, max_value=50.0, value=0.0, step=0.1)
            submitted = st.form_submit_button("Predict Yield ЁЯЪА")
            if submitted:
                if yield_model:
                    if all([rainfall >= 0, pesticide >= 0, temperature >= 0]):
                        features = np.array([[rainfall, pesticide, temperature]])
                        with st.spinner("ЁЯФН Predicting yield..."):
                            prediction = yield_model.predict(features)
                        st.success(f"ЁЯМЯ Predicted Yield: **{prediction[0]:.2f} tons**")
                    else:
                        st.error("ЁЯЪл Please fill in all fields with valid values.")
                else:
                    st.warning("ЁЯЫая╕П Yield prediction: **5.0 tons**")

    elif selected_menu == "Today's Weather":
        st.subheader("ЁЯМдя╕П Weather Forecast")
        st.markdown("<p style='text-align: center; color: #4CAF50;'>Enter Location Details Below ЁЯУН</p>", unsafe_allow_html=True)
        with st.form("weather_form"):
            zip_code = st.text_input("ЁЯУН Enter ZIP Code", help="e.g., 110001 for Delhi")
            country_code = st.text_input("ЁЯМН Enter Country Code", value="IN", help="e.g., IN for India")
            submitted = st.form_submit_button("Get Weather ЁЯМЮ")
            if submitted:
                with st.spinner("ЁЯФН Fetching weather data..."):
                    weather_data = get_weather(zip_code, country_code)
                if "error" in weather_data:
                    st.error(weather_data["error"])
                elif weather_data.get('main'):
                    city_name = weather_data.get('name', 'Unknown Location')
                    st.markdown(f"<p style='text-align: center;'>ЁЯУН <b>Location</b>: {city_name}</p>", unsafe_allow_html=True)
                    st.markdown(f"<p style='text-align: center;'>ЁЯМбя╕П <b>Temperature</b>: {weather_data['main']['temp']}┬░C</p>", unsafe_allow_html=True)
                    st.markdown(f"<p style='text-align: center;'>тЫЕ <b>Weather</b>: {weather_data['weather'][0]['description'].capitalize()}</p>", unsafe_allow_html=True)
                    st.markdown(f"<p style='text-align: center;'>ЁЯТз <b>Humidity</b>: {weather_data['main']['humidity']}%</p>", unsafe_allow_html=True)
                else:
                    st.error("ЁЯЪл Could not retrieve weather data.")

    elif selected_menu == "Fertilizer Recommendation":
        st.subheader("ЁЯзк Fertilizer Recommendation")
        st.markdown("<p style='text-align: center; color: #4CAF50;'>Enter Crop & Soil Details Below ЁЯОЙ</p>", unsafe_allow_html=True)
        with st.form("fertilizer_form"):
            temperature = st.number_input("ЁЯМбя╕П Temperature (┬░C)", min_value=0.0, max_value=50.0, value=25.0, step=0.1)
            humidity = st.number_input("ЁЯТз Humidity (%)", min_value=0.0, max_value=100.0, value=50.0, step=0.1)
            moisture = st.number_input("ЁЯТж Moisture (%)", min_value=0.0, max_value=100.0, value=30.0, step=0.1)
            col1, col2 = st.columns(2)
            with col1:
                soil_type = st.selectbox("ЁЯМН Soil Type", ["Sandy", "Loamy", "Black", "Red", "Clayey"])
            with col2:
                crop_type = st.selectbox("ЁЯМ╛ Crop Type", ["Maize", "Sugarcane", "Cotton", "Tobacco", "Paddy", "Barley", "Wheat", "Millets", "Oil seeds", "Pulses", "Ground Nuts"])
            nitrogen = st.number_input("ЁЯМ┐ Nitrogen (N) (kg/ha)", min_value=0.0, value=0.0, step=0.1)
            potassium = st.number_input("ЁЯМ┐ Potassium (K) (kg/ha)", min_value=0.0, value=0.0, step=0.1)
            phosphorous = st.number_input("ЁЯМ▒ Phosphorous (P) (kg/ha)", min_value=0.0, value=0.0, step=0.1)
            submitted = st.form_submit_button("Recommend Fertilizer ЁЯМЯ")
            if submitted:
                if fertilizer_model and label_encoder_soil and label_encoder_crop:
                    if all([temperature >= 0, humidity >= 0, moisture >= 0, nitrogen >= 0, potassium >= 0, phosphorous >= 0]):
                        soil_encoded = label_encoder_soil.transform([soil_type])[0]
                        crop_encoded = label_encoder_crop.transform([crop_type])[0]
                        features = np.array([[temperature, humidity, moisture, soil_encoded, crop_encoded, nitrogen, potassium, phosphorous]])
                        with st.spinner("ЁЯФН Analyzing..."):
                            prediction = fertilizer_model.predict(features)
                        st.success(f"ЁЯМЯ Recommended Fertilizer: **{prediction[0]}**")
                    else:
                        st.error("ЁЯЪл Please fill in all fields with valid values.")
                else:
                    st.error("ЁЯЪл Fertilizer recommendation model or label encoders failed to load. Please ensure the model files exist.")

    elif selected_menu == "Smart Farming Guidance":
        st.subheader("ЁЯУЪ Smart Farming Guidance")
        st.markdown("<p style='text-align: center; color: #4CAF50;'>Enter Farming Details Below ЁЯОЙ</p>", unsafe_allow_html=True)
        with st.form("guidance_form"):
            crop = st.text_input("ЁЯМ╛ Enter Crop Name", help="e.g., Wheat")
            country = st.text_input("ЁЯМН Enter Country Name", help="e.g., India")
            language = st.selectbox("ЁЯЧгя╕П Select Language", ["English", "Hindi"])
            submitted = st.form_submit_button("Get Guidance ЁЯЪА")
            if submitted:
                if crop and country:
                    with st.spinner("ЁЯФН Fetching guidance..."):
                        lang_code = "en" if language == "English" else "hi"
                        guidance = get_smart_farming_info(crop, country, lang_code)
                    st.markdown(f"<div style='text-align: center;'>{guidance}</div>", unsafe_allow_html=True)
                    st.image(f"https://source.unsplash.com/600x400/?{crop}", caption=f"ЁЯМ┐ {crop.capitalize()}", use_container_width=True)
                else:
                    st.error("ЁЯЪл Please fill in all fields.")
